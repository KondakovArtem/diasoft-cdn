{"__common":["noCyrillycName","checkBoundingBox",{"type":"isContainedBy","parent":"main-grid"}],"__component_common":[{"type":"isContainedBy","parent":"main-grid"}],"__frame_common":["checkIsFrameAutoLayout"],"__frame_other":[{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  if (node.parent.type === \"PAGE\") {\r\n    return;\r\n  }\r\n  const parentName = utils.normalizeName(node.parent.name);\r\n  if ([\"p-grid\", \"sidebar\", \"p-card\"].includes(parentName)) {\r\n    utils.isHorizontalLayout(node);\r\n    utils.checkSpacing(node, {\r\n      type: \"checkSpacing\",\r\n      value: 16,\r\n    });\r\n  }\r\n};\r\n"}],"__root":["excludeCommon",{"type":"containsChildren","names":["Main-grid","Tabs-menu","Menu"]}],"button-group":["component"],"button":["component"],"buttons":["component"],"calendar-input":["component"],"card-header":["isHorizontalLayout",{"type":"containsChildren","names":["Left","Right"]}],"card":[{"type":"isChildrenOf","parent":"p-form"},"isVerticalLayout"],"divider":["component"],"dropdown":["component"],"filter":["component",{"type":"isChildrenOf","parent":"table-filter-container"}],"grid-td":["component",{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  const {ErrorTypes} = utils;\r\n  if (node.mainComponent) {\r\n    const props = utils.parseComponentProps(node.mainComponent.name);\r\n    if (props.Type === \"Checkbox\" && node.width !== 36) {\r\n      utils.createErrorObject(\r\n        node,\r\n        ErrorTypes.STRUCTURE,\r\n        `Для узла <b>grid-td</b> с <b>Type = 'Checkbox'</b>, ширина должна быть задана <b>36px</b>`\r\n      );\r\n    }\r\n  }\r\n};\r\n"}],"grid-th":["component",{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n    const {ErrorTypes} = utils;\r\n    if (node.mainComponent) {\r\n      const props = utils.parseComponentProps(node.mainComponent.name);\r\n      if (props.Type === \"Checkbox\" && node.width !== 36) {\r\n        utils.createErrorObject(\r\n          node,\r\n          ErrorTypes.STRUCTURE,\r\n          `Для узла <b>grid-th</b> с <b>Type = 'Checkbox'</b>, ширина должна быть задана <b>36px</b>`\r\n        );\r\n      }\r\n    }\r\n  };\r\n  "}],"grid":["isVerticalLayout",{"type":"containsChildren","names":[{"name":"p-datatable-tbody","mincount":1},{"name":"p-datatable-thead","maxcount":1}]}],"icons":["component"],"info":["component"],"input":["component"],"main-grid":[{"type":"expression","source":"module.exports = (node, utils) => {\r\n    \r\n}"},"isRootChildren","excludeCommon","noCyrillycName"],"menu":[{"type":"expression","source":"module.exports = (node, utils) => {\r\n    return {transclude: false}\r\n}"},"excludeCommon","noCyrillycName"],"p-card":["isVerticalLayout",{"type":"isChildrenOf","parent":"card"},{"type":"checkSpacing","value":16},{"type":"checkPadding","value":[0,4,8,16,24,32,48]}],"p-datatable-tbody":[{"type":"isChildrenOf","parent":["grid","table"]},{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  const parentName = utils.normalizeName(node.parent.name);\r\n  if (parentName === \"grid\") {\r\n    utils.containsChildren(node, {\r\n      type: \"containsChildren\",\r\n      names: [\r\n        { name: \"divider\", maxcount: 2 },\r\n        { name: \"tr-group\", mincount: 1 },\r\n        { name: \"tr-group-expanded\", maxcount: 1 },\r\n      ],\r\n    });\r\n  } else if (parentName === \"table\") {\r\n    utils.containsChildren(node, {\r\n      type: \"containsChildren\",\r\n      names: [\r\n        { name: \"divider\", maxcount: 1 },\r\n        { name: \"tr\", mincount: 1 },\r\n      ],\r\n    });\r\n  }\r\n};\r\n"},{"type":"checkPadding","value":[0]},"isVerticalLayout"],"p-datatable-thead":[{"type":"isChildrenOf","parent":["grid","table"]},{"type":"checkPadding","value":[0]},"isVerticalLayout",{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  const parentName = utils.normalizeName(node.parent.name);\r\n  if (parentName === \"grid\") {\r\n    utils.containsChildren(node, {\r\n      type: \"containsChildren\",\r\n      names: [\r\n        { name: \"divider\", maxcount: 2 },\r\n        { name: \"tr-group\", mincount: 1 },\r\n        { name: \"tr-group-expanded\", maxcount: 1 },\r\n      ],\r\n    });\r\n  } else if (parentName === \"table\") {\r\n    utils.containsChildren(node, {\r\n      type: \"containsChildren\",\r\n      names: [\r\n        { name: \"divider\", maxcount: 1 },\r\n        { name: \"tr\", mincount: 1 },\r\n      ],\r\n    });\r\n  }\r\n};\r\n"}],"p-form":[{"type":"isChildrenOf","parent":"main-grid"},"isVerticalLayout"],"p-grid":["isVerticalLayout"],"p-tab-view":[{"type":"isChildrenOf","parent":"p-card"},"isHorizontalLayout",{"type":"containsChildren","names":["p-tabview-panels","p-tabview-nav"]}],"p-tabview-nav":[{"type":"isChildrenOf","parent":"p-tab-view"},{"type":"checkSpacing","value":0},{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  const { ErrorTypes } = utils;\r\n  const pivotVerts = utils.findNested(node, \"pivot-vert\");\r\n  const activeVerts = pivotVerts.filter((item) => {\r\n    if (item.mainComponent) {\r\n      return (\r\n        utils.parseComponentProps(item.mainComponent.name).State === \"Active\"\r\n      );\r\n    }\r\n  });\r\n  if (activeVerts.length !== 1) {\r\n    utils.createErrorObject(\r\n      node,\r\n      ErrorTypes.STRUCTURE,\r\n      `Для узла <b>p-tabview-nav</b> должен быть указан один вложенный компонент <b>pivot-vert</b> с состоянием <b>State = \"Active\"</b>`\r\n    );\r\n  }\r\n};\r\n"}],"p-tabview-panels":[{"type":"isChildrenOf","parent":"p-tab-view"},{"type":"checkSpacing","value":16},{"type":"checkPadding","value":[0,4,8,16,24,32,48]},"isVerticalLayout"],"pivot-vert":["component",{"type":"isContainedBy","parent":"p-tabview-nav"}],"radio-button":["component"],"radio-group":["component"],"modal-header":["isHorizontalLayout"],"sidebar":["isVerticalLayout","excludeCommon",{"type":"isChildrenOf","parent":"main-grid"}],"split-button":["component"],"status":["component"],"stepper":["component"],"table-filter-container":[{"type":"containsChildren","names":["filter"]}],"table-td":["component"],"table-th":["component"],"table":["isVerticalLayout",{"type":"containsChildren","names":[{"name":"p-datatable-tbody","mincount":1},{"name":"p-datatable-thead","maxcount":1}]},{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  const bodyList = node.children.filter(\r\n    (item) => utils.normalizeName(item.name) === \"p-datatable-tbody\"\r\n  );\r\n  const { ErrorTypes } = utils;\r\n  if (bodyList.length) {\r\n    const bodyHeight = bodyList[0].height;\r\n    const wrongHeight = bodyList.filter((item) => item.height !== bodyHeight);\r\n    if (wrongHeight.length) {\r\n      utils.createErrorObject(\r\n        node,\r\n        ErrorTypes.PADDING,\r\n        \"Все вложенные элементы <b>p-datatable-tbody</b> должны иметь одинаковую высоту\"\r\n      );\r\n    }\r\n  }\r\n};\r\n"}],"tabs-menu":["rootChildren",{"type":"expression","source":"module.exports = (node, utils) => {\r\n    return {transclude: false}\r\n}"},"excludeCommon","noCyrillycName"],"tr-group-expanded":[{"type":"isChildrenOf","parent":["p-datatable-thead","p-datatable-tbody"]}],"tr-group":[{"type":"isChildrenOf","parent":["p-datatable-thead","p-datatable-tbody"]},{"type":"containsChildren","names":[{"name":"tr","mincount":1}]},"isVerticalLayout"],"tr":["isHorizontalLayout",{"type":"expression","source":"module.exports = (node, rule, utils) => {\r\n  const parent = utils.findParent(node, [\"grid\", \"table\"]);\r\n\r\n  if (parent) {\r\n    const parentName = utils.normalizeName(parent.name);\r\n    if (parentName === \"grid\") {\r\n      utils.isChildrenOf(node, {\r\n        type: \"isChildrenOf\",\r\n        parent: [\"tr-group\"],\r\n      });\r\n      utils.containsChildren(node, {\r\n        type: \"containsChildren\",\r\n        names: [\"grid-td\", \"grid-th\"],\r\n      });\r\n      utils.checkPadding(node, {\r\n        type: \"checkPadding\",\r\n        value: [0],\r\n        description:\r\n          \" Горизонтальные отступы необходимо задавать в родительском <b>tr-group</b>\",\r\n      });\r\n    } else if (parentName === \"table\") {\r\n      utils.isChildrenOf(node, {\r\n        type: \"isChildrenOf\",\r\n        parent: [\"p-datatable-thead\", \"p-datatable-tbody\"],\r\n      });\r\n      utils.containsChildren(node, {\r\n        type: \"containsChildren\",\r\n        names: [\"table-th\", \"table-td\"],\r\n      });\r\n    }\r\n  }\r\n};\r\n"},{"type":"checkSpacing","value":0}]}